--- node_modules/redis/index.js	2015-06-12 00:45:32.000000000 +0530
+++ node_modules/redis/index.js	2015-06-12 00:46:52.000000000 +0530
@@ -6,6 +6,7 @@
     to_array = require("./lib/to_array"),
     events = require("events"),
     crypto = require("crypto"),
+    assert = require('assert'),
     contrailConfig = require(process.mainModule.exports['corePath'] + '/config/config.global'),
     parsers = [], commands,
     connection_id = 0,
@@ -524,9 +525,13 @@
     } else {
         console.log("node_redis: no callback to send error: " + err.message);
         // this will probably not make it anywhere useful, but we might as well throw
+        forceAssertOnRedisError();
+        return;
+        /*
         process.nextTick(function () {
             throw err;
         });
+        */
     }
 };
 
@@ -1014,9 +1019,17 @@
 };
 Multi.prototype.HMSET = Multi.prototype.hmset;
 
+function forceAssertOnRedisError ()
+{
+    setTimeout(function() {
+        assert(0);
+    }, 30000);
+}
+
 Multi.prototype.exec = function (callback) {
     var self = this;
 
+    var errors = [];
     // drain queue, callback will catch "QUEUED" or error
     // TODO - get rid of all of these anonymous functions which are elegant but slow
     this.queue.forEach(function (args, index) {
@@ -1042,12 +1055,16 @@
                 if (typeof cur[cur.length - 1] === "function") {
                     cur[cur.length - 1](err);
                 } else {
-                    throw new Error(err);
+                    errors.push(err);
                 }
-                self.queue.splice(index, 1);
+                //self.queue.splice(index, 1);
             }
         });
     }, this);
+    if (errors.length > 0) {
+        forceAssertOnRedisError();
+        return;
+    }
 
     // TODO - make this callback part of Multi.prototype instead of creating it each time
     return this._client.send_command("EXEC", [], function (err, replies) {
@@ -1056,7 +1073,8 @@
                 callback(new Error(err));
                 return;
             } else {
-                throw new Error(err);
+                forceAssertOnRedisError();
+                return;
             }
         }
 
